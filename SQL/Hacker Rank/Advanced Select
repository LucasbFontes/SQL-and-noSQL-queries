/* Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. 
Output one of the following statements for each record in the table: */

SELECT 
    CASE
        WHEN ( A + B <= C) THEN "Not A Triangle"
        WHEN (A=B AND B=C AND A=C) THEN "Equilateral"
        WHEN ( (A=B) OR (A=C) OR (B=C) ) THEN "Isosceles"
        ELSE "Scalene"
    END
FROM 
    TRIANGLES
	
	
---------------------------------------------------------------------------------------------------------------

/* Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each
profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P),
and ASingerName(S).

Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output 
them in the following format:

	There are a total of [occupation_count] [occupation]s.
	where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the
	 lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered 
	alphabetically.
*/

SELECT 
    CONCAT(NAME, '(', LEFT(OCCUPATION,1),')') AS NAME
FROM 
    OCCUPATIONS

UNION ALL

SELECT 
    CONCAT('There are a total of ', COUNT(OCCUPATION),' ',  lower(OCCUPATION),'s.') 
FROM
    OCCUPATIONS
GROUP BY
    OCCUPATION   
ORDER BY 
    NAME ASC 

---------------------------------------------------------------------------------------------------------------------------------

/*
Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath
 its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.
/*





----------------------------------------------------------------------------------------------------------------------------------

/*
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
*/


SELECT 
    N,
    CASE 
        WHEN P is null THEN "Root"
        WHEN N IN (SELECT P FROM BST) THEN "Inner"
        ELSE "Leaf"
    END
FROM 
    BST
ORDER BY 
    N ASC
	
---------------------------------------------------------------------------------------------------------------------------------

/*
Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number
 of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
*/

SELECT
    C.company_code,
    C.founder,
    COUNT(distinct L.lead_manager_code),
    COUNT(distinct S.senior_manager_code),
    COUNT(distinct M.manager_code),
    COUNT(distinct E.employee_code)
FROM COMPANY C INNER JOIN LEAD_MANAGER L 
ON C.company_code = L.company_code
INNER JOIN SENIOR_MANAGER S
ON L.company_code = S.company_code
INNER JOIN MANAGER M
ON S.company_code = M.company_code
INNER JOIN Employee E
ON M.company_code = E.company_code
GROUP BY
    C.company_code, C.founder    
ORDER BY C.company_code ASC 































