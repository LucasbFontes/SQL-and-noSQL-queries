/* Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns. */

SELECT
    SUM(C.POPULATION)
FROM
    CITY C 
    INNER JOIN COUNTRY CO
    ON C.COUNTRYCODE = CO.CODE
WHERE
    CO.CONTINENT = 'Asia'
	
----------------------------------------------------------------------------------------------------------------------

/* Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

 */

SELECT
    C.NAME
FROM
    CITY C 
    INNER JOIN COUNTRY CO
    ON C.COUNTRYCODE = CO.CODE
WHERE
    CO.CONTINENT = 'Africa'
	
-----------------------------------------------------------------------------------------------------------------------

/* Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective 
average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.   */

SELECT
  CO.CONTINENT,
  FLOOR(AVG(C.POPULATION))
FROM
    CITY C 
    INNER JOIN COUNTRY CO
    ON C.COUNTRYCODE = CO.CODE
GROUP BY 1


-------------------------------------------------------------------------------------------------------------------------

/*Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES 
of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades 
are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular 
students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by 
their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those
 particular students by their marks in ascending order.

Write a query to help Eve. */

SELECT
	S.NAME,
	G.GRADE,
	S.MARKS
FROM
	STUDENTS S
	INNER JOIN GRADES G
	ON S.MARKS BETWEEN G.MIN_MARK AND G.MAX_MARK
WHERE	
	G.GRADE > 7
ORDER BY 
	G.GRADE DESC, S.NAME ASC
	
SELECT
	NULL,
	G.GRADE,
	S.MARKS
FROM
	STUDENTS S
	INNER JOIN GRADES G
	ON S.MARKS BETWEEN G.MIN_MARK AND G.MAX_MARK
WHERE	
	G.GRADE <= 7
ORDER BY 
	G.GRADE DESC, S.MARKS ASC
	
-----------------------------------------------------------------------------------------------------------------------------------	
/*Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print 
the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending 
order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores 
in same number of challenges, then sort them by ascending hacker_id. */

SELECT h.hacker_id, h.name
FROM submissions s
INNER JOIN challenges C
on S.challenge_id = C.challenge_id
INNER JOIN difficulty d
ON C.difficulty_level = d.difficulty_level
INNER JOIN Hackers H
ON s.hacker_id = h.hacker_id
where s.score = d.score 
group by h.hacker_id, h.name
having count(s.hacker_id) > 1
order by count(s.hacker_id) desc, s.hacker_id asc


-------------------------------------------------------------------------------------------------------------------------------------
/*Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.

Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high 
power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of 
descending power. If more than one wand has same power, sort the result in order of descending age. */

SELECT 
    w.id,
    p.age,
    w.coins_needed,
    w.power 
FROM 
    Wands as w join 
    Wands_Property as p 
    on (w.code = p.code) 
WHERE p.is_evil = 0 and 
      w.coins_needed = 
        (SELECT 
            MIN(coins_needed)
        FROM 
            Wands as w1 join 
            Wands_Property as p1
            ON (w1.code = p1.code) 
         WHERE
            w1.power = w.power and p1.age = p.age) 
ORDER BY 
    w.power desc, p.age desc
	
----------------------------------------------------------------------------------------------------------------------------------------

/* Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges 
created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same
 number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is 
 less than the maximum number of challenges created, then exclude those students from the result. */
 
 
 
 
 
 
 
 
 
 
 
 
 
 




